#coding=utf-8
"""
Django settings for apiserver project.

Generated by 'django-admin startproject' using Django 1.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
import sys
import OpenSSL

reload(sys)
sys.setdefaultencoding('utf-8')

PRODUCTION = False
SINGAPORE = False

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

sys.path.insert(0, os.path.join(BASE_DIR, 'modules', 'dayu'))
sys.path.insert(0, os.path.join(BASE_DIR, 'modules', 'prettyexc-0.6.0'))
sys.path.insert(0, os.path.join(BASE_DIR, 'modules', 'itunes-iap-2.3.0'))
sys.path.insert(0, os.path.join(BASE_DIR, 'modules', 'matrix-sdk-python'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '^-*#@2tp35ylgv#(6+@bkv@c1)+&+uz!3kvw9he%uq0n2&!)oe'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['mainsdk.youku-game.com', 'hwmainsdk.youku-game.com'] if PRODUCTION else ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'api',
]

from matrix import Matrix, Consumer

if SINGAPORE:
    MATRIX_TOKEN = '22e6edc2448d4a889534a7d4f433a4cf'
else:
    MATRIX_TOKEN = '4fbff88cb11e43bfbb4ef598032420b3'
    
if PRODUCTION:
    MATRIX_CLIENT = Matrix(MATRIX_TOKEN, consumer=Consumer(request_timeout=7))
else:
    MATRIX_CLIENT = Matrix(MATRIX_TOKEN, consumer=Consumer(request_timeout=7, debug=True))
MATRIX_SWITCH = True

U8_RELATED_APIS = ['/game/user/information', '/game/user/profile']
API_DEFINATIONS = {
    '/game/initial': {'method': 'GET',
                      'required_params': ['appid', 'appkey', 'version_code'],
                      'desc': 'SDK初始化接口',},
    '/game/nick/register': {'method': 'POST',
                            'required_params': ['username', 'password'],
                            'desc': '通过用户名和密码注册的接口',},
    '/game/nick/repassword': {'method': 'POST',
                              'required_params': ['username', 
                                                  'userid', 
                                                  'password', 
                                                  'newpassword'],
                              'desc': '用户修改密码接口',},
    '/game/bindphone/request_verifycode': {'method': 'POST',
                                           'required_params': ['username', 
                                                               'userid', 
                                                               'phone'],
                                           'desc': '用户请求下发短信，用来绑定手机',},
    '/game/bindphone/bindphone': {'method': 'POST',
                                  'required_params': ['username', 
                                                      'userid', 
                                                      'verifycode', 
                                                      'phone'],
                                  'desc': '用户已经收到验证码短信，此时请求服务器来完成绑定手机的最后一步'},
    '/game/login': {'method': 'POST',
                    'required_params': ['username', 
                                        'password', 
                                        'appkey'],
                    'desc': '用户登陆'},
    '/game/logout': {'method': 'POST',
                     'required_params': [],
                     'desc': '登出用户'},
    '/game/verify_receipt': {'method': 'POST',
                             'required_params': ['verify_from', 
                                                 'appid', 
                                                 'amount', 
                                                 'app_order_id', 
                                                 'good_name', 
                                                 'pay_channel', 
                                                 'userid', 
                                                 'raw_data'],
                             'desc': '验证支付结果，包含Itunes和支付宝相关的验证，专门为苹果支付准备'},
    '/game/check_apporderid': {'method': 'POST',
                               'required_params': ['appid', 'app_order_id'],
                               'desc': '验证订单是否已经存在，目前只有安卓调用'},
    '/game/do_pay': {'method': 'POST',
                     'required_params': ['appid', 
                                         'amount', 
                                         'app_order_id', 
                                         'game_callback_url', 
                                         'good_name', 
                                         'pay_channel', 
                                         'userid'],
                     'desc': '发起付费接口'},
    '/game/resetpassword/request_verifycode_resetpassword': {'method': 'POST',
                                                             'required_params': ['phone'],
                                                             'desc': '请求下发短信以用于重置密码'},
    '/game/resetpassword/resetpassword': {'method': 'POST',
                                          'required_params': ['phone', 
                                                              'verifycode', 
                                                              'newpassword'],
                                          'desc': '根据手机下发的验证码重置用户密码'},
    '/game/verify_googlepay':{'method': 'POST',
                              'required_params': ['appid', 
                                                  'packagename', 
                                                  'productid', 
                                                  'token', 
                                                  'userid', 
                                                  'app_order_id', 
                                                  'amount', 
                                                  'game_callback_url', 
                                                  'good_name', 
                                                  'passthrough'],
                              'desc':'google支付:接收sdk请求验证订单支付状态'},
    '/game/bindthirdparty':{'method': 'POST',
                            'required_params': ['username', 
                                                'password', 
                                                'appid', 
                                                'thirdparty', 
                                                'thirdparty_credential'],
                            'desc':'游客登录的时候尝试绑定三方账户'},
    '/game/touristlogin':{'method': 'POST',
                            'required_params': ['username', 
                                                'password', 
                                                'appkey', 
                                                'appid'],
                            'desc':'专为海外游客找回准备'},
}

class API_IMPORTANT_EVENTS:
    NICK_REGISTER_EXCEPTION = 'nick register exception' # 用户注册异常
    REQUEST_SMS = 'request sms' # 请求发送短信验证码的事件
    ORDER_CREATED = 'order created' # 创建订单的事件
    ORDER_CALLBACK_ERROR = 'order callback error' # 银联、支付宝、微信、爱贝等支付渠道回调我们的服务器对应接口时，出现了某些错误
    REUQEST_U8 = 'request u8' # 给U8通知发货
    IAP_VERIFY_ERROR = 'iap verify error' # 苹果内购验证失败
    IAP_VERIFY_INFO = 'iap verify info' # 苹果内购验证的一些上下文信息
    GOOGLE_PAY_VERIFY_INFO = 'google pay verify info' # google支付验证商品消费状态信息
    GOOGLE_PAY_VERIFY_ERROR = 'google pay verify error' # google支付验证商品消费状态错误
    GOOGLE_PAY_REFRESH_TOKEN = 'google pay refresh token' # google支付刷新servertoken时的错误
    PAY_SUCCESS = 'pay success'
    SDK_INFO = 'sdk info'
    
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
#     'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'api.middleware.StatsMiddleware',
    'api.middleware.ValidateMiddleware',
]

ROOT_URLCONF = 'apiserver.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'),],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'apiserver.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases
if PRODUCTION:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'mainsdk',
            'USER': 'heyijoy',
            'PASSWORD': 'heyi20!^#',
            'HOST': 'rm-2zehwfs97kkr6l438.mysql.rds.aliyuncs.com',
            'PORT': 3306,
        }
    }
    
    if SINGAPORE:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.mysql',
                'NAME': 'mainsdk',
                'USER': 'heyijoy',
                'PASSWORD': 'heyi20!^#',
                'HOST': 'rm-t4n49q29o55gt96ih.mysql.singapore.rds.aliyuncs.com',
                'PORT': 3306,
            }
        }
    
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'mainsdk',
            'USER': 'heyijoy',
            'PASSWORD': 'heyijoytest',
            'HOST': 'sandbox-mainsdk.youku-game.com',
            'PORT': 3306,
        }
    }


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'

VERIFY_CODE_LENGTH = 6

# 支付宝相关配置

# 支付宝分配给开发者的应用ID
ALIPAY_APPID = '2016090101834820'
# 接口名称
ALIPAY_METHOD = 'alipay.trade.app.pay'
# 格式，仅支持JSON
ALIPAY_FORMAT = 'json'
# 请求使用的编码格式
ALIPAY_CHARSET = 'utf-8'
# 商户生成签名字符串所使用的签名算法类型，目前支持RSA
ALIPAY_SIGN_TYPE = 'RSA'
# 调用的接口版本，固定为1.0
ALIPAY_VERSION = '1.0'
# 支付宝服务器主动通知商户服务器里指定的页面http/https路径。建议商户使用https
if PRODUCTION:
    ALIPAY_NOTIFY_URL='https://mainsdk.youku-game.com/game/verify_alipay'
else:
    ALIPAY_NOTIFY_URL='https://sandbox-mainsdk.youku-game.com/game/verify_alipay'
# 默认的产品码
ALIPAY_APP_PRODUCT_CODE = 'QUICK_MSECURITY_PAY'
# 支付宝开发者应用私钥(接入方生成)
ALIPAY_APP_PRIVATE_KEY = os.path.join(BASE_DIR, 'utils/paycenter/alipay/certs/alipay_app_private_key')
ALIPAY_APP_PRIVATE_KEY_OBJ = OpenSSL.crypto.load_privatekey(OpenSSL.crypto.FILETYPE_PEM, open(ALIPAY_APP_PRIVATE_KEY).read(), None)

# 支付宝开发者应用公钥（接入方生成）
ALIPAY_APP_PUBLIC_KEY = os.path.join(BASE_DIR, 'utils/paycenter/alipay/certs/alipay_app_public_key')

# 支付宝开发者公钥（支付宝生成）
ALIPAY_PUBLIC_KEY = os.path.join(BASE_DIR, 'utils/paycenter/alipay/certs/alipay_public_key')
_ALIPAY_PUBLIC_KEY_OBJ_PUB = OpenSSL.crypto.load_publickey(OpenSSL.crypto.FILETYPE_PEM, open(ALIPAY_PUBLIC_KEY).read())
_ALIPAY_PUBLIC_KEY_OBJ_X509 = OpenSSL.crypto.X509()
_ALIPAY_PUBLIC_KEY_OBJ_X509.set_pubkey(_ALIPAY_PUBLIC_KEY_OBJ_PUB)
ALIPAY_PUBLIC_KEY_OBJ = _ALIPAY_PUBLIC_KEY_OBJ_X509
# 支付宝相关配置 END

# 银联支付相关配置
if PRODUCTION:
    UNIONPAY_CERTS_PATH = os.path.join(BASE_DIR, 'utils/paycenter/unionpay/certs')
    UNIONPAY_APP_PRIVATE_KEY_CERT_PASSWORD = '123456' # 商户私钥证书密码
    UNIONPAY_APP_PRIVATE_KEY_CERT_FILENAME = '310420153110034.pfx'
    UNIONPAY_PUBLIC_KEY_CERT_FILENAME = 'acp_prod_verify_sign.cer'
    UNIONPAY_MER_ID = '310420153110034'
    UNIONPAY_BACK_URL = 'https://mainsdk.youku-game.com/game/verify_unionpay'
    UNIONPAY_FRONT_URL = 'https://mainsdk.youku-game.com/game/unionpay_front'
    UNIONPAY_PAY_URL = 'https://gateway.95516.com/gateway/api/frontTransReq.do'
else:
    UNIONPAY_CERTS_PATH = os.path.join(BASE_DIR, 'utils/paycenter/unionpay/certs_test')
    UNIONPAY_APP_PRIVATE_KEY_CERT_PASSWORD = '000000' # 商户私钥证书密码
    UNIONPAY_APP_PRIVATE_KEY_CERT_FILENAME = '700000000000001_acp.pfx'
    UNIONPAY_PUBLIC_KEY_CERT_FILENAME = 'verify_sign_acp.cer'
    UNIONPAY_MER_ID = '310420153110035'
    UNIONPAY_BACK_URL = 'https://sandbox-mainsdk.youku-game.com/game/verify_unionpay'
    UNIONPAY_FRONT_URL = 'https://sandbox-mainsdk.youku-game.com/game/unionpay_front'
    UNIONPAY_PAY_URL = 'https://101.231.204.80:5000/gateway/api/frontTransReq.do'

# 商户私钥证书
UNIONPAY_APP_PRIVATE_KEY_CERT = os.path.join(UNIONPAY_CERTS_PATH, UNIONPAY_APP_PRIVATE_KEY_CERT_FILENAME) # PKCS12 format
UNIONPAY_PRIVATE_KEYSTORE = OpenSSL.crypto.load_pkcs12(open(UNIONPAY_APP_PRIVATE_KEY_CERT).read(), UNIONPAY_APP_PRIVATE_KEY_CERT_PASSWORD)
UNIONPAY_PRIVATE_KEY_OBJ = UNIONPAY_PRIVATE_KEYSTORE.get_privatekey()
UNIONPAY_CERT_OBJ = UNIONPAY_PRIVATE_KEYSTORE.get_certificate()
UIONPAY_CERT_ID = UNIONPAY_CERT_OBJ.get_serial_number()

# 银联公钥证书
UNIONPAY_PUBLIC_KEY_CERT = os.path.join(UNIONPAY_CERTS_PATH, UNIONPAY_PUBLIC_KEY_CERT_FILENAME)
UNIONPAY_PUBLIC_KEY_OBJ = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_PEM, open(UNIONPAY_PUBLIC_KEY_CERT).read())

UNIONPAY_ACC_TYPE = '01'
UNIONPAY_ACCESS_TYPE='0'
UNIONPAY_BIZ_TYPE = '000201'
UNIONPAY_CERT_ID = '%s' % UIONPAY_CERT_ID
UNIONPAY_CHANNEL_TYPE='07'
UNIONPAY_CURRENCY_CODE = '156' # 人民币
UNIONPAY_ENCODING = 'UTF-8'
UNIONPAY_SIGN_METHOD = '01'
UNIONPAY_VERSION = '5.0.0'
UNIONPAY_TXN_TYPE = '01' # 交易类型：消费
UNIONPAY_TXN_SUBTYPE = '01' # 交易子类， 依据实际交易类型填写 默认取值:00
# 银联支付相关配置 END

# 微信支付相关配置
WECHATPAY_CHARSET = 'utf-8'# 请求使用的编码格式
if PRODUCTION:# 接收微信支付异步通知回调地址，通知url必须为直接可访问的url，不能携带参数
    WECHATPAY_NOTIFY_URL = 'https://mainsdk.youku-game.com/game/verify_wechatpay'
else:
    WECHATPAY_NOTIFY_URL = 'https://sandbox-mainsdk.youku-game.com/game/verify_wechatpay'
WECHATPAY_DOPAY_URL = 'https://api.mch.weixin.qq.com/pay/unifiedorder'# 微信统一下单接口
WECHATPAY_CHECKORDER_URL = 'https://api.mch.weixin.qq.com/pay/orderquery'# 微信订单查询接口
# 说明:微信支付考虑多个收款账户的情况，appid等参数配在数据库中
# 微信支付相关配置 END

# 爱贝支付相关配置
IAPPPAY_APP_ID = '300854089'
# app私钥
IAPPPAY_PRIVATE_KEY = os.path.join(BASE_DIR, 'utils/paycenter/iapppay/certs/iapppay_app_private_key')
IAPPPAY_PRIVATE_KEY_OBJ = OpenSSL.crypto.load_privatekey(OpenSSL.crypto.FILETYPE_PEM, open(IAPPPAY_PRIVATE_KEY).read(), None)
# 平台公钥
IAPPPAY_PUBLIC_KEY = os.path.join(BASE_DIR, 'utils/paycenter/iapppay/certs/iapppay_public_key')
_IAPPPAY_PUBLIC_KEY_OBJ_PUB = OpenSSL.crypto.load_publickey(OpenSSL.crypto.FILETYPE_PEM, open(IAPPPAY_PUBLIC_KEY).read())
_IAPPPAY_PUBLIC_KEY_OBJ_X509 = OpenSSL.crypto.X509()
_IAPPPAY_PUBLIC_KEY_OBJ_X509.set_pubkey(_IAPPPAY_PUBLIC_KEY_OBJ_PUB)
IAPPPAY_PUBLIC_KEY_OBJ = _IAPPPAY_PUBLIC_KEY_OBJ_X509

if PRODUCTION:# 接收爱贝支付异步通知回调地址
    IAPPPAY_NOTIFY_URL = 'https://mainsdk.youku-game.com/game/verify_iapppay'
else:
    IAPPPAY_NOTIFY_URL = 'https://sandbox-mainsdk.youku-game.com/game/verify_iapppay'
IAPPPAY_DOPAY_URL = 'http://ipay.iapppay.com:9999/payapi/order'
# 爱贝支付相关配置 END

# MOL支付相关配置
MOLPAY_VERSION = 'v1'
MOLPAY_NOTIFY_URL = 'https://hwmainsdk.youku-game.com/game/verify_molpay'
MOLPAY_DOPAY_URL = 'https://sandbox-api.mol.com/payout/payments'
MOLPAY_CHECKORDER_URL = 'https://sandbox-api.mol.com/payout/payments'
# MOL支付相关配置END

# 分期乐支付相关配置
FENQILEPAY_PARTNER_ID = 'MPA20150729000001'
FENQILEPAY_SECRET = '37f6b2579b3247eb38683f845c085f8a'
FENQILEPAY_C_MERCH_ID = '1'
if PRODUCTION:
    FENQILEPAY_NOTIFY_URL = 'https://mainsdk.youku-game.com/game/verify_fenqilepay'
else:
    FENQILEPAY_NOTIFY_URL = 'https://sandbox-mainsdk.youku-game.com/game/verify_fenqilepay'
FENQILEPAY_DOPAY_URL = 'http://mapi.fenqile.com/merchpay/pay'
# 分期乐支付相关配置END

# U8服务器回调相关配置
PAY_CALLBACK_TIMEOUT = 6 # 请求U8服务器的回调地址时的超时时间
PAY_CALLBACK_LOCAL_REMOTE_MAPPING = zip(['AppOrderID', 'Price', 'Uid', 'ChannelOrderID'], 
                                        ['game_order_id', 'real_amount', 'user_id', 'trade_id'])

# U8服务器回调相关配置 END

# 阿里大于短信服务接入相关配置信息
SMS_ALIDAYU_APPKEY = '23443958'
SMS_ALIDAYU_APPSECRET = 'd7f75e09bfb5e8466abf457198b71835'
SMS_BIND_PHONE_TEMPLATE_CODE = 'SMS_14250463'
SMS_BIND_PHONE_FREE_SIGN_NAME = '合乐智趣'
SMS_RESET_PASSWORD_TEMPLATE_CODE = 'SMS_13700751'
SMS_RESET_PASSWORD_FREE_SIGN_NAME = '合乐智趣'

# Redis缓存
if PRODUCTION:
    REDIS_HOST = '231ec38671864df4.redis.rds.aliyuncs.com'
    REDIS_PORT = 6379
    REDIS_PASSWORD = 'heYI2016'
    
    REDIS_HOST_SINGAPORE = 'r-t4n1c21fbf492b54.redis.singapore.rds.aliyuncs.com'
    REDIS_PORT_SINGAPORE = 6379
    REDIS_PASSWORD_SINGAPORE = 'heYI2016'
    
    if SINGAPORE:
        REDIS_HOST = REDIS_HOST_SINGAPORE
        REDIS_PORT = REDIS_PORT_SINGAPORE
        REDIS_PASSWORD = REDIS_PASSWORD_SINGAPORE
else:
    REDIS_HOST = '127.0.0.1'
    REDIS_PORT = 6379
    REDIS_PASSWORD = None

# Use celery to execute asynchronous tasks which use Redis as backend
if PRODUCTION:
    BROKER_URL = 'redis://:{}@{}:{}/7'.format(REDIS_PASSWORD, REDIS_HOST, REDIS_PORT)
    # 回调（一般是支付回调通知U8服务器）失败重试策略
    CELERY_TASK_RETRY_POLICY = {0: 1, 
                                1: 60 * 10, 
                                2: 60 * 10, 
                                3: 60 * 60, 
                                4: 60 * 120, 
                                5: 60 * 360,
                                6: 60 * 900,}
else:
    BROKER_URL = 'redis://{}:{}/7'.format(REDIS_HOST, REDIS_PORT)
    # 回调（一般是支付回调通知U8服务器）失败重试策略
    CELERY_TASK_RETRY_POLICY = {0: 1,
                                1: 2, 
                                2: 4, 
                                3: 6, 
                                4: 9, 
                                5: 13,
                                6: 17,}

# 回调（一般是支付回调通知U8服务器）失败重试次数
CELERY_TASK_RETRY_POLICY_MAX_RETRIES = len(CELERY_TASK_RETRY_POLICY) - 1
CELERY_ACCEPT_CONTENT = ['pickle', 'json', 'msgpack', 'yaml']
CELERY_TASK_PUBLISH_RETRY = True
CELERY_TASK_PUBLISH_RETRY_POLICY = {'max_retries': 3, 'interval_start': 0, 'interval_step': 0.2, 'interval_max': 0.2} # will be retried in the case of connection loss or other connection errors

if PRODUCTION:
    LOG_BASE_DIR = '/opt/www/logs/'
else:
    LOG_BASE_DIR = '/tmp/logs/'

import string
DISABLED_CHAR_SET = set(['i', '1', 'l', '0', 'o'])
ALPHA_DIGIT_SET = set(string.letters[:26] + string.digits) # 小写字母+数字
ALPHA_DIGIT_SET = ALPHA_DIGIT_SET - DISABLED_CHAR_SET
ALPHA_SET = set(string.letters[26:]) - DISABLED_CHAR_SET
DIGIT_SET = set(string.digits) - DISABLED_CHAR_SET

import re
PHONE_FORMAT_REGEX = re.compile('^1\d{10}$')

FB_GRAPH_API_ENDPOINT = 'https://graph.facebook.com/'
GOOGLE_TOKEN_INFO_ENDPOINT = 'https://www.googleapis.com/oauth2/v3/tokeninfo'
QQ_TOKEN_INFO_ENDPOINT = 'https://graph.qq.com/oauth2.0/me'
WEIBO_TOKEN_INFO_ENDPOINT = 'https://api.weibo.com/oauth2/get_token_info'
WECHAT_GET_TOKEN_ENDPOINT = 'https://api.weixin.qq.com/sns/oauth2/'
WECHAT_USER_INFO_ENDPOINT = 'https://api.weixin.qq.com/sns/userinfo'

LOGGING_DATE_FMT = '%Y-%m-%dT%H:%M:%S%z' # ISO8601
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '%(levelname)s\t%(asctime)s\t%(message)s',
            'datefmt': LOGGING_DATE_FMT,
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
        
        'sms': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_BASE_DIR, 'sms.log'),
            'formatter':'standard',
        },
                 
        'pay': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_BASE_DIR, 'pay.log'),
            'formatter':'standard',
        },

        'error_stack': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_BASE_DIR, 'error_stack.log'),
            'formatter':'standard',
        },
        
        'ios_receipt': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_BASE_DIR, 'ios_receipt.log'),
            'formatter':'standard',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
        },
                
        'sms': {
            'handlers': ['sms'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
        },

        'pay': {
            'handlers': ['pay'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
        },
        
        'error_stack': {
            'handlers': ['error_stack'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),        
        },
        
        'ios_receipt': {
            'handlers': ['ios_receipt'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
        },
    },
}
